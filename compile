#!/bin/bash

# To use the compile script execute it with the name of the tex file
# as first argument (with or without .tex). This will run pdflatex
# twice.
#
# Optionally you can give it a second argument: This can be "clean" or "bibtex"
#
# "clean" will remove auxiliary files for the project with endings:
# .aux .bbl .blg .ilg .lof .log .lot .nlo .nls .out .pdf .ps .toc
#
# "bibtex" will additionally execute bibtex once and pdflatex once


if [ $# -eq 0 ];then
    echo "You need to give compile the name of your project as the first argument or --help to get help"
    exit 0
fi

name=`basename $1 .`
name=`basename $name .tex`
#echo $name

# Clean files
if [ $# -eq 2 ] && [ $2 == "clean" ];then
    echo "### Cleaning ###"
    var=`ps|grep kpdf`
    ps|grep kpdf > /dev/null
    if [ $? -eq 0 ];then
	kpdf_pid=`echo $var|awk '{print $1}'`
	echo -n "kpdf running, stopping it .............................. "
	kill $kpdf_pid
	if [ $? -eq 0 ];then
	    echo "done!"
	fi
    fi

    echo -en "Removing .aux .bbl .blg .ilg .lof .log .lot\n"\
             "        .nlo .nls .out .pdf .ps  .toc ........ "
    rm $name.aux 2> /dev/null
    rm $name.bbl 2> /dev/null
    rm $name.blg 2> /dev/null
    rm $name.ilg 2> /dev/null
    rm $name.lof 2> /dev/null
    rm $name.log 2> /dev/null
    rm $name.lot 2> /dev/null
    rm $name.nlo 2> /dev/null
    rm $name.nls 2> /dev/null
    rm $name.out 2> /dev/null
    rm $name.pdf 2> /dev/null
    rm $name.ps  2> /dev/null
    rm $name.toc 2> /dev/null

    echo "done!"
    exit 0
fi

echo "### Compiling ###"

#Latex compile script, pdflatex version
bibtex=0
latex=0

pdflatex $name
if [ $? -gt 0 ];then
echo
echo "Error Latex interrupted, canceled"
exit 0
fi
latex=$(( latex + 1 ))
pdflatex $name;latex=$(( latex + 1 ))

cat $name.log|grep "Writing nomenclature file $name.nlo"
list_of_abbreviations=$?
# This if clause is put in because it takes to long time to
# generate abbreviations list everytime
if [ $# -eq 2 ] && [ $2 == "abbrev" ];then
    list_of_abbreviations=$list_of_abbreviations
else
    list_of_abbreviations=1
fi

#bibtex test
#cat $name.log|grep "There were undefined citations" OLD ONE
if [ $# -gt 1 ];then
    if [ $2 == "bibtex" ];then
	bibtest=0
    else
	bibtest=42
    fi
else
    cat $name.log|grep "LaTeX Warning: Citation"
    bibtest=$?
fi
if [ $bibtest -eq 0 ];then
    bibtex $name;bibtex=$(( bibtex + 1 ))
    pdflatex $name;latex=$(( latex + 1 ))
    if [ $? -gt 0 ];then
	echo
	echo "Error Latex interrupted, canceled"
	exit 0
    fi
    if [ $list_of_abbreviations -gt 0 ];then
	pdflatex $name;latex=$(( latex + 1 ))
    fi
fi

if [ $list_of_abbreviations -eq 0 ];then
    makeindex $name.nlo -s nomencl.ist -o $name.nls
    pdflatex $name;latex=$(( latex + 1 ))
fi

echo
grep "Package FiXme Summary" $name.log > /dev/null
if [ $? -eq 0 ];then
  echo "################### FiXme summary ##################"
  grep "Package FiXme Summary" $name.log;grep "(FiXme)" $name.log
fi
grep -i undefined $name.log > /dev/null
if [ $? -eq 0 ];then
  echo "########## THERE WERE UNDEFINED REFERENCE ##########"
  grep -i undefined $name.log
fi

echo
echo -n "pdflatex has been run: "$latex" times."
if [ $bibtex -gt 0 ];then
    echo " Bibtex once"
else
    echo
fi
if [ $list_of_abbreviations -eq 0 ];then
    echo "List of Abbreviations formed"
fi

ps|grep evince > /dev/null
if [ $? -eq 0 ];then
echo "evince already running, no new instance started"
exit 0
fi
evince $name.pdf &


